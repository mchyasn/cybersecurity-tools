#!/usr/bin/env python3

import os
import yara
import argparse
from datetime import datetime

def scan_file(rules, file_path):
    try:
        matches = rules.match(file_path)
        if matches:
            print(f"[+] Match found in: {file_path}")
            for match in matches:
                print(f"    - Rule: {match.rule}")
            return (file_path, [match.rule for match in matches])
        else:
            return (file_path, [])
    except Exception as e:
        print(f"[!] Error scanning {file_path}: {e}")
        return (file_path, [])

def load_rules(rules_path):
    rules = {}
    for filename in os.listdir(rules_path):
        if filename.endswith('.yar') or filename.endswith('.yara'):
            filepath = os.path.join(rules_path, filename)
            rules[filename] = filepath
    return yara.compile(filepaths=rules)

def scan_directory(rules, dir_path):
    results = []
    for root, _, files in os.walk(dir_path):
        for file in files:
            filepath = os.path.join(root, file)
            result = scan_file(rules, filepath)
            results.append(result)
    return results

def save_log(results, out_file):
    with open(out_file, 'w') as f:
        for file_path, matches in results:
            if matches:
                f.write(f"[+] {file_path}\n")
                for rule in matches:
                    f.write(f"    - {rule}\n")
        f.write("\nScan completed.\n")

def main():
    parser = argparse.ArgumentParser(description="Auto-YARA: Scan files or directories using YARA rules.")
    parser.add_argument("-r", "--rules", required=True, help="Path to folder with YARA rules (.yar)")
    parser.add_argument("-t", "--target", required=True, help="Path to file or directory to scan")
    parser.add_argument("-o", "--output", default="logs/yara_scan.log", help="Output log file")
    args = parser.parse_args()

    if not os.path.exists(args.rules):
        print("[!] Rules folder not found.")
        return
    if not os.path.exists(args.target):
        print("[!] Target file/folder not found.")
        return

    print("[*] Compiling YARA rules...")
    rules = load_rules(args.rules)

    if os.path.isfile(args.target):
        results = [scan_file(rules, args.target)]
    else:
        results = scan_directory(rules, args.target)

    os.makedirs(os.path.dirname(args.output), exist_ok=True)
    save_log(results, args.output)
    print(f"[+] Scan complete. Results saved to {args.output}")

if __name__ == "__main__":
    main()
