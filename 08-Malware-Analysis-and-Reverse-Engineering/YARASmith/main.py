import os
import logging
import yaml
from modules import rule_builder, rule_tester, rule_packager

logging.basicConfig(filename="logs/yarasmith.log", level=logging.INFO)

def interactive_build():
    name = input("Rule name: ").strip()
    hex_pattern = input("Hex pattern (space-separated bytes, optional): ").strip()
    keywords = input("Comma-separated ASCII keywords: ").strip().split(",")
    meta = {}
    while True:
        k = input("Add metadata key (or press enter to stop): ").strip()
        if not k:
            break
        v = input(f"Value for {k}: ").strip()
        meta[k] = v
    rule = rule_builder.generate_rule(name, hex_pattern, [k.strip() for k in keywords if k], meta)
    print("\nGenerated Rule:\n" + rule)
    return rule

def main():
    print("[*] YARASmith - Modular YARA Rule Builder & Tester")
    with open("config/config.yml") as f:
        config = yaml.safe_load(f)

    built_rules = []
    while True:
        choice = input("\n(1) Build Rule  (2) Test Rule  (3) Save Pack  (4) Exit\n> ").strip()
        if choice == "1":
            rule = interactive_build()
            built_rules.append(rule)
        elif choice == "2":
            rule_file = input("Path to .yar file: ").strip()
            sample_dir = "samples"
            results = rule_tester.test_rule(rule_file, sample_dir)
            print("\nMatch Results:")
            for file, res in results.items():
                print(f"  {file}: {res}")
        elif choice == "3":
            path = config["rule_pack_output"]
            rule_packager.save_rule_pack(built_rules, path)
            print(f"[+] Rule pack saved to {path}")
        elif choice == "4":
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()
