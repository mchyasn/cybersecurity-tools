import yaml
from unicorn import Uc, UcError, UC_ARCH_X86, UC_MODE_32, UC_MODE_64
from unicorn.x86_const import UC_X86_REG_ESP

def emulate_shellcode(shellcode_bytes, arch):
    try:
        if arch == 'x86':
            uc = Uc(UC_ARCH_X86, UC_MODE_32)
        elif arch == 'x64':
            uc = Uc(UC_ARCH_X86, UC_MODE_64)
        else:
            print("[!] Unsupported architecture")
            return

        ADDRESS = 0x1000
        STACK_ADDR = 0x900000
        STACK_SIZE = 0x2000
        SHELLCODE_SIZE = 0x1000

        # Allocate memory
        uc.mem_map(ADDRESS, SHELLCODE_SIZE)
        uc.mem_map(STACK_ADDR, STACK_SIZE)

        # Pad shellcode with NOPs
        padded_shellcode = shellcode_bytes + b'\x90' * 16
        uc.mem_write(ADDRESS, padded_shellcode)

        # Setup stack with dummy return address
        ret_addr = ADDRESS + len(padded_shellcode)
        uc.mem_write(STACK_ADDR + STACK_SIZE - 4, ret_addr.to_bytes(4, byteorder='little'))
        uc.reg_write(UC_X86_REG_ESP, STACK_ADDR + STACK_SIZE - 4)

        print("[*] Emulating shellcode...")
        uc.emu_start(ADDRESS, ret_addr)
        print("[+] Emulation complete")

    except UcError as e:
        print(f"[!] Emulation failed: {e}")
