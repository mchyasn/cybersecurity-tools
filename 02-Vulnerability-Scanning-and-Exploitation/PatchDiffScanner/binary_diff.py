import lief
import json

def load_binary(filepath):
    try:
        return lief.parse(filepath)
    except Exception as e:
        print(f"Error parsing {filepath}: {e}")
        return None

def extract_functions(binary):
    if not binary:
        return {}
    funcs = {}
    for symbol in binary.symbols:
        if str(symbol.type) == "FUNCTION" and symbol.size > 0:
            funcs[symbol.name] = (symbol.value, symbol.size)
    return funcs

def diff_functions(unpatched_funcs, patched_funcs):
    added = {}
    removed = {}
    modified = {}

    for fname in unpatched_funcs:
        if fname not in patched_funcs:
            removed[fname] = unpatched_funcs[fname]
        elif unpatched_funcs[fname] != patched_funcs[fname]:
            modified[fname] = {
                "before": unpatched_funcs[fname],
                "after": patched_funcs[fname]
            }

    for fname in patched_funcs:
        if fname not in unpatched_funcs:
            added[fname] = patched_funcs[fname]

    return added, removed, modified

def generate_report(added, removed, modified, output_path):
    result = {
        "added_functions": added,
        "removed_functions": removed,
        "modified_functions": modified
    }
    with open(output_path, "w") as f:
        json.dump(result, f, indent=2)
