import argparse
import os
import logging
from exploits.dirtypipe import run_dirtypipe
from colorama import Fore, Style

# Ensure log/output dirs
os.makedirs("logs", exist_ok=True)
os.makedirs("scans", exist_ok=True)

logging.basicConfig(filename="logs/debug.log", level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

def main():
    parser = argparse.ArgumentParser(description="KernelPanicTrigger â€“ Local Privilege Escalation Exploit Toolkit")
    parser.add_argument("exploit", choices=["dirtypipe"], help="Exploit to run")
    parser.add_argument("--check", action="store_true", help="Only check if system is vulnerable")
    parser.add_argument("--output", help="Optional output file", default=None)
    parser.add_argument("--verbose", action="store_true", help="Enable verbose console logging")
    args = parser.parse_args()

    if args.verbose:
        console = logging.StreamHandler()
        console.setLevel(logging.DEBUG)
        logging.getLogger().addHandler(console)

    if not args.output:
        args.output = f"scans/{args.exploit}_output.txt"

    print(Fore.CYAN + f"[*] Running {args.exploit} (check={args.check})..." + Style.RESET_ALL)
    logging.info(f"Running exploit: {args.exploit}")

    if args.exploit == "dirtypipe":
        run_dirtypipe(check_only=args.check, output_file=args.output)

if __name__ == "__main__":
    main()
