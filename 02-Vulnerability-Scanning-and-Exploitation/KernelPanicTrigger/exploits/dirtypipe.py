import os
import platform
import subprocess
import logging
from colorama import Fore, Style

def run_dirtypipe(check_only=False, output_file="scans/dirtypipe_output.txt"):
    results = []
    results.append("[*] CVE-2022-0847 (DirtyPipe) Detection")

    # 1. Confirm Linux kernel version
    uname = platform.uname()
    version = uname.release
    results.append(f"[*] Kernel version: {version}")

    vulnerable = False
    try:
        major, minor, patch = [int(x) for x in version.split(".")[:3]]
        # Vulnerable range: 5.8 <= version < 5.16.11 or 5.17.0-rc1 to rc7
        if (major == 5 and 8 <= minor <= 15) or (major == 5 and minor == 16 and patch < 11):
            vulnerable = True
    except Exception as e:
        results.append(f"[!] Error parsing kernel version: {e}")
        logging.warning("Version parsing failed")

    if vulnerable:
        results.append(Fore.RED + "[+] System appears vulnerable to DirtyPipe!" + Style.RESET_ALL)
        logging.info("System matches vulnerable kernel range")
    else:
        results.append(Fore.GREEN + "[-] Kernel version not in DirtyPipe vulnerable range" + Style.RESET_ALL)
        logging.info("System not vulnerable by version check")

    # 2. If exploit requested, run proof-of-concept
    if not check_only and vulnerable:
        results.append("[*] Attempting DirtyPipe local exploit (mock payload)...")
        try:
            # WARNING: This is a placeholder â€“ real exploit code would go here
            # We'll simulate successful privesc
            if os.geteuid() != 0:
                results.append(Fore.YELLOW + "[+] Simulated: root shell gained (demo)" + Style.RESET_ALL)
            else:
                results.append(Fore.GREEN + "[=] Already running as root." + Style.RESET_ALL)
        except Exception as e:
            results.append(f"[!] Exploit failed: {e}")
            logging.error(f"Exploit execution failed: {e}")
    elif check_only:
        results.append("[*] Skipping exploit (check-only mode)")

    with open(output_file, "w") as f:
        for line in results:
            f.write(line.replace(Style.RESET_ALL, "").replace(Fore.RED, "").replace(Fore.GREEN, "").replace(Fore.YELLOW, "") + "\n")

    print(f"[+] DirtyPipe check complete. Results saved to {output_file}")
