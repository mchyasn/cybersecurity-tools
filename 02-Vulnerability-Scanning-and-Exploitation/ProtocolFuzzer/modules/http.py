# modules/http.py
import socket
import random
import string
import time
import logging

def generate_random_payload():
    patterns = [
        b"A" * 1000,
        b"%x" * 500,
        b"\x00" * 512,
        bytes(random.choices(string.printable.encode(), k=1024)),
    ]
    return random.choice(patterns)

def fuzz(config):
    target = config.get("target")
    port = config.get("port", 80)
    timeout = config.get("timeout", 5)
    delay = config.get("delay", 0.5)
    attempts = config.get("attempts", 10)

    results = {
        "target": target,
        "port": port,
        "attempts": [],
        "crash_detected": False
    }

    for i in range(attempts):
        payload = generate_random_payload()
        request = b"GET /" + payload + b" HTTP/1.1\r\nHost: " + target.encode() + b"\r\n\r\n"

        try:
            with socket.create_connection((target, port), timeout=timeout) as s:
                s.sendall(request)
                response = s.recv(4096)
                results["attempts"].append({
                    "payload_preview": payload[:30].decode(errors="replace"),
                    "response_code": response[:12].decode(errors="replace")
                })
        except Exception as e:
            logging.error(f"Error on attempt {i+1}: {e}")
            results["attempts"].append({
                "payload_preview": payload[:30].decode(errors="replace"),
                "error": str(e)
            })
            results["crash_detected"] = True

        time.sleep(delay)

    return results
