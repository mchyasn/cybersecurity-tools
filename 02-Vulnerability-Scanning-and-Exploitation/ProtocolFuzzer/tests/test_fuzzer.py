# tests/test_fuzzer.py
import os
import pytest
import yaml
import importlib.util

CONFIG_GOOD = "configs/sample_http.yaml"
CONFIG_BAD = "configs/bad_config.yaml"


def test_good_config_parsing():
    with open(CONFIG_GOOD, "r") as f:
        config = yaml.safe_load(f)
    assert "target" in config
    assert isinstance(config["port"], int)
    assert config["protocol"] == "http"


def test_bad_config_fails():
    with pytest.raises(SystemExit):
        os.system(f"python3 main.py -c {CONFIG_BAD} --test")


def test_module_load_and_fuzz():
    module_path = "modules/http.py"
    spec = importlib.util.spec_from_file_location("http", module_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    assert hasattr(module, "fuzz")
    assert callable(module.fuzz)


def test_module_timeout():
    result = os.popen(f"python3 main.py -c {CONFIG_GOOD} -o scans/test_result.json").read()
    assert "Fuzzing complete" in result
