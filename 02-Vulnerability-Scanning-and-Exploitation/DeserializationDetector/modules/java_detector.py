import requests
import logging

def check_java_deserialization(url, output_file):
    logging.info("Starting Java deserialization check...")

    # Simulated detection logic: send test payload that might trigger Java gadget chains
    payload = {"data": "rO0ABXNy...CommonsCollections"}  # Mock gadget base64
    headers = {"Content-Type": "application/x-java-serialized-object"}

    try:
        r = requests.post(url, data=payload["data"], headers=headers, timeout=5)
        result = []

        if "Exception" in r.text or r.status_code == 500:
            result.append("[+] Potential Java deserialization vulnerability detected (server responded with error).")
        else:
            result.append("[-] No obvious Java deserialization behavior detected.")

        result.append(f"[*] HTTP status: {r.status_code}")
        result.append(f"[*] Content preview: {r.text[:120].replace('\\n', '')}...")

        with open(output_file, "w") as f:
            for line in result:
                f.write(line + "\n")

        print(f"[+] Java deserialization check complete. Results saved to {output_file}")
        logging.info("Java deserialization detection finished")

    except Exception as e:
        logging.error(f"Java check failed: {e}")
        print(f"[!] Java deserialization check error: {e}")
