import argparse
import os
import logging
from modules.java_detector import check_java_deserialization
from modules.php_detector import check_php_deserialization
from modules.dotnet_detector import check_dotnet_deserialization

# Setup directories and logging
os.makedirs("logs", exist_ok=True)
os.makedirs("scans", exist_ok=True)

logging.basicConfig(filename='logs/debug.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def main():
    parser = argparse.ArgumentParser(description="DeserializationDetector â€“ Detect Insecure Deserialization in Java, PHP, and .NET")
    parser.add_argument("stack", choices=["java", "php", "dotnet"], help="Target platform stack")
    parser.add_argument("url", help="Target URL to test (e.g. http://host/path)")
    parser.add_argument("--output", help="Output file name", default=None)
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    args = parser.parse_args()

    if args.verbose:
        console = logging.StreamHandler()
        console.setLevel(logging.DEBUG)
        logging.getLogger().addHandler(console)

    if not args.output:
        safe_url = args.url.replace("http://", "").replace("https://", "").replace("/", "_")
        args.output = f"scans/{args.stack}_{safe_url}.txt"

    logging.info(f"Running {args.stack} deserialization check on {args.url}")

    if args.stack == "java":
        check_java_deserialization(args.url, args.output)
    elif args.stack == "php":
        check_php_deserialization(args.url, args.output)
    elif args.stack == "dotnet":
        check_dotnet_deserialization(args.url, args.output)

if __name__ == "__main__":
    main()
