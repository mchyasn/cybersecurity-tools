from ldap3 import Server, Connection, ALL
import logging
import time

def ldap_enumeration(target, domain, auth_method, output_file):
    logging.info(f"Starting LDAP enumeration on {target} using {auth_method} auth")
    start_time = time.time()

    if auth_method == "kerberos":
        logging.error("Kerberos auth is not yet implemented. Exiting.")
        print("[!] Kerberos not supported yet.")
        return

    try:
        server = Server(target, get_info=ALL)
        conn = Connection(server, auto_bind=True)

        if not conn.bound:
            raise Exception("LDAP bind failed.")
        logging.info("LDAP bind successful")

        # Get base DN
        if not conn.search('', '(objectClass=*)', search_scope='BASE', attributes=['defaultNamingContext']):
            raise Exception("Unable to determine base DN")
        base_dn = conn.entries[0]['defaultNamingContext'].value
        logging.info(f"Detected base DN: {base_dn}")

        results = []

        # --- User Enumeration ---
        results.append("=== USERS ===")
        if conn.search(base_dn, '(objectClass=user)', attributes=['cn', 'sAMAccountName', 'userPrincipalName']):
            if not conn.entries:
                results.append("[!] No users found.")
            else:
                for e in conn.entries:
                    user = e.entry_attributes_as_dict
                    results.append(f"User: {user.get('sAMAccountName', [''])[0]}, UPN: {user.get('userPrincipalName', [''])[0]}")
        else:
            results.append("[!] User search failed.")

        # --- Group Enumeration ---
        results.append("\n=== GROUPS ===")
        if conn.search(base_dn, '(objectClass=group)', attributes=['cn', 'member']):
            if not conn.entries:
                results.append("[!] No groups found.")
            else:
                for e in conn.entries:
                    group = e.entry_attributes_as_dict
                    name = group.get('cn', [''])[0]
                    members = group.get('member', [])
                    results.append(f"Group: {name} | Members: {len(members)}")
        else:
            results.append("[!] Group search failed.")

        with open(output_file, "w") as f:
            for line in results:
                f.write(line + "\n")

        print(f"[+] LDAP enumeration complete. Results saved to {output_file}")
        logging.info(f"LDAP output saved to {output_file}")

    except Exception as e:
        print(f"[!] LDAP error: {e}")
        logging.error(f"LDAP enumeration failed: {e}")

    finally:
        try:
            conn.unbind()
        except:
            pass
        elapsed = round(time.time() - start_time, 2)
        logging.info(f"LDAP enumeration took {elapsed} seconds")
