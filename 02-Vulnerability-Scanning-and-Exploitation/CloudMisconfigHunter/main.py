import argparse
import os
import logging
from colorama import Fore, Style, init

init(autoreset=True)

def main():
    parser = argparse.ArgumentParser(description="CloudMisconfigHunter â€“ Scan for public cloud misconfigurations")
    parser.add_argument("provider", choices=["aws", "gcp", "azure"], help="Cloud provider")
    parser.add_argument("target", help="Target bucket/container/API")
    parser.add_argument("--output", help="Output file")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    args = parser.parse_args()

    if not os.path.exists("scans"):
        os.makedirs("scans")

    if not os.path.exists("logs"):
        os.makedirs("logs")

    if args.verbose:
        logging.basicConfig(filename="logs/debug.log", level=logging.DEBUG)
        print(f"{Fore.CYAN}Scan started: provider={args.provider}, target={args.target}{Style.RESET_ALL}")
    else:
        logging.basicConfig(filename="logs/debug.log", level=logging.WARNING)

    # Auto-generate sanitized output file name if not provided
    if not args.output:
        safe_target = (
            args.target.replace("://", "_")
                       .replace("/", "_")
                       .replace("?", "_")
                       .replace("=", "_")
                       .replace("&", "_")
                       .replace(".", "_")
        )
        args.output = f"scans/{args.provider}_{safe_target}.txt"

    print(Fore.CYAN + f"[*] Scanning {args.provider.upper()} for misconfigurations..." + Style.RESET_ALL)

    try:
        if args.provider == "aws":
            from modules.aws_hunter import run_aws_check
            run_aws_check(args.target, args.output)

        elif args.provider == "gcp":
            from modules.gcp_hunter import run_gcp_check
            run_gcp_check(args.target, args.output)

        elif args.provider == "azure":
            from modules.azure_hunter import run_azure_check
            run_azure_check(args.target, args.output)

    except Exception as e:
        logging.exception("Scan failed")
        print(Fore.RED + f"[!] Scan failed: {e}" + Style.RESET_ALL)


if __name__ == "__main__":
    main()
